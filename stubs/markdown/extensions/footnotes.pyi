# Stubs for markdown.extensions.footnotes (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from . import Extension
from ..inlinepatterns import Pattern
from ..odict import OrderedDict
from ..postprocessors import Postprocessor
from ..preprocessors import Preprocessor
from ..treeprocessors import Treeprocessor
from ..util import etree, text_type
from typing import Any

FN_BACKLINK_TEXT: str
NBSP_PLACEHOLDER: str
DEF_RE: Any
TABBED_RE: Any

class FootnoteExtension(Extension):
    config: Any = ...
    unique_prefix: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    parser: Any = ...
    md: Any = ...
    def extendMarkdown(self, md: Any, md_globals: Any) -> None: ...
    footnotes: Any = ...
    def reset(self) -> None: ...
    def findFootnotesPlaceholder(self, root: Any): ...
    def setFootnote(self, id: Any, text: Any) -> None: ...
    def get_separator(self): ...
    def makeFootnoteId(self, id: Any): ...
    def makeFootnoteRefId(self, id: Any): ...
    def makeFootnotesDiv(self, root: Any): ...

class FootnotePreprocessor(Preprocessor):
    footnotes: Any = ...
    def __init__(self, footnotes: Any) -> None: ...
    def run(self, lines: Any): ...
    def detectTabbed(self, lines: Any): ...

class FootnotePattern(Pattern):
    footnotes: Any = ...
    def __init__(self, pattern: Any, footnotes: Any) -> None: ...
    def handleMatch(self, m: Any): ...

class FootnoteTreeprocessor(Treeprocessor):
    footnotes: Any = ...
    def __init__(self, footnotes: Any) -> None: ...
    def run(self, root: Any) -> None: ...

class FootnotePostprocessor(Postprocessor):
    footnotes: Any = ...
    def __init__(self, footnotes: Any) -> None: ...
    def run(self, text: Any): ...

def makeExtension(*args: Any, **kwargs: Any): ...
