# Stubs for markdown.inlinepatterns (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def build_inlinepatterns(md_instance: Any, **kwargs: Any): ...

NOBRACKET: str
BRK: Any
NOIMG: str
BACKTICK_RE: str
ESCAPE_RE: str
EMPHASIS_RE: str
STRONG_RE: str
EM_STRONG_RE: str
STRONG_EM_RE: str
SMART_EMPHASIS_RE: str
EMPHASIS_2_RE: str
LINK_RE: Any
IMAGE_LINK_RE: Any
REFERENCE_RE: Any
SHORT_REF_RE: Any
IMAGE_REFERENCE_RE: Any
NOT_STRONG_RE: str
AUTOLINK_RE: str
AUTOMAIL_RE: str
HTML_RE: str
ENTITY_RE: str
LINE_BREAK_RE: str

def dequote(string: Any): ...

ATTR_RE: Any

def handleAttributes(text: Any, parent: Any): ...

class Pattern:
    pattern: Any = ...
    compiled_re: Any = ...
    safe_mode: bool = ...
    markdown: Any = ...
    def __init__(self, pattern: Any, markdown_instance: Optional[Any] = ...) -> None: ...
    def getCompiledRegExp(self): ...
    def handleMatch(self, m: Any) -> None: ...
    def type(self): ...
    def unescape(self, text: Any): ...

class SimpleTextPattern(Pattern):
    def handleMatch(self, m: Any): ...

class EscapePattern(Pattern):
    def handleMatch(self, m: Any): ...

class SimpleTagPattern(Pattern):
    tag: Any = ...
    def __init__(self, pattern: Any, tag: Any) -> None: ...
    def handleMatch(self, m: Any): ...

class SubstituteTagPattern(SimpleTagPattern):
    def handleMatch(self, m: Any): ...

class BacktickPattern(Pattern):
    tag: str = ...
    def __init__(self, pattern: Any) -> None: ...
    def handleMatch(self, m: Any): ...

class DoubleTagPattern(SimpleTagPattern):
    def handleMatch(self, m: Any): ...

class HtmlPattern(Pattern):
    def handleMatch(self, m: Any): ...
    def unescape(self, text: Any): ...

class LinkPattern(Pattern):
    def handleMatch(self, m: Any): ...
    def sanitize_url(self, url: Any): ...

class ImagePattern(LinkPattern):
    def handleMatch(self, m: Any): ...

class ReferencePattern(LinkPattern):
    NEWLINE_CLEANUP_RE: Any = ...
    def handleMatch(self, m: Any): ...
    def makeTag(self, href: Any, title: Any, text: Any): ...

class ImageReferencePattern(ReferencePattern):
    def makeTag(self, href: Any, title: Any, text: Any): ...

class AutolinkPattern(Pattern):
    def handleMatch(self, m: Any): ...

class AutomailPattern(Pattern):
    def handleMatch(self, m: Any): ...
